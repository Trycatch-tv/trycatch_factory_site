---
import { Icon } from "astro-icon/components";
import "@iconify-json/mdi";
import { ChevronDown, CircleArrowUp, CircleHelp } from "lucide-astro";

const props = Astro.props;

const data = {
  title: "Preguntas Frecuentes",
  faq: [
    {
      question: "¿Qué servicios ofrece TryCatch Factory?",
      answer: "Ofrecemos desarrollo de software a medida, consultoría tecnológica, mantenimiento y actualización, integración de sistemas y más.",
    },
    {
      question: "¿Cómo es el proceso de desarrollo de un proyecto?",
      answer: "Nuestro proceso incluye análisis y planificación, desarrollo y pruebas, y finalmente, implementación y soporte.",
    },
    {
      question: "¿Qué tecnologías utilizan?",
      answer: "Trabajamos con tecnologías de vanguardia como React, Node.js, Java, AWS, entre otras.",
    },
    {
      question: "¿Cómo puedo ponerme en contacto para una consulta?",
      answer: "Puedes contactarnos a través del formulario en nuestra página web o por correo electrónico a ventas@trycatchfactory.com.",
    },
  ],
};

// Crear un estado reactivo para rastrear el estado de cada pregunta
let open: { [key: string]: boolean } = {};

// Inicializar los estados para cada pregunta
data.faq.forEach((item) => {
  open[item.question] = false;
});
---

<script>
  import { gsap } from "gsap";

  import { ScrollTrigger } from "gsap/ScrollTrigger";

  import { ScrollToPlugin } from "gsap/ScrollToPlugin";

  gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

  gsap.fromTo(
    "#question",
    {
      x: -10,
      opacity: 0,
    },
    {
      y: -100,
      opacity: 1,
      scrollTrigger: {
        trigger: "#question",
        start: "top 80%", // Start the animation when the top of the box hits 80% from the top of the viewport
        end: "top 20%", // End the animation when the top of the box hits 20% from the top of the viewport
        scrub: true, // Smooth scrubbing, takes 1 second to "catch up" to the scrollbar
      },
    },
  );
  window.addEventListener("DOMContentLoaded", () => {
    const buttons = document.querySelectorAll(".question-btn");

    buttons.forEach((button) => {
      button.addEventListener("click", function () {
        const targetId = button.getAttribute("data-toggle");
        if (targetId !== null) {
          const target = document.getElementById(targetId) as HTMLElement;
          if (target) {
            const isExpanded = target.classList.contains("fade-in"); 
            if (!isExpanded) {
              target.style.display = "block"; 
            }
            target.classList.toggle("fade-in", !isExpanded); 
            target.classList.toggle("fade-out", isExpanded); 
            setTimeout(() => {
              target.style.display = isExpanded ? "none" : "block"; 
            }, 500); 
          } else {
            console.error("Element with ID", targetId, "not found.");
          }
        } else {
          console.error("data-toggle attribute is missing.");
        }
      });
    });
  });
</script>
<section class="flex flex-col justify-center min-h-screen w-full" id="question">
  <div class="flex items-center justify-center flex-col gap-y-2 py-5">
    <h2 class="text-[#172554] text-2xl md:text-4xl font-bold pb-3">
      {`${data.title}`}
    </h2>
  </div>
  <div class="rounded-[9px]">
    <section class="max-w-5xl mx-auto py-2 sm:py-4 mb-2">
      <div class="w-full px-4 md:px-5 xl:px-2 py-4 rounded-[9px] max-sm:px-0">
        <div
          class="border border-gray-200 shadow-sm overflow-hidden mx-auto w-full max-w-4xl rounded-none sm:rounded-lg"
        >
          {
            data.faq.map((item, index) => (
              <div class="border-b  border-gray-200 bg-gray-50 ">
                <button
                  data-toggle={`answer-${index}`}
                  class="question-btn  flex w-full items-start gap-x-4 justify-between rounded-lg text-left text-lg font-bold text-[#172554] focus:outline-none p-5 border-b-0 border-[#172554] border-solid border-width-9"
                  id={`button-${index}`}
                >
                  <div class="flex gap-2">
                    <span class="text-[#172554] text-2xl">
                      <CircleHelp />
                    </span>
                    {item.question}
                  </div>
                  <ChevronDown />
                </button>
                <div
                  class="answer max-h-0   pt-2 pb-5 px-5 text-sm lg:text-base text-gray-900 font-medium mb-2"
                  id={`answer-${index}`}
                  style={{ display: open[item.question] ? "block" : "none" }}
                >
                  {item.answer}
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </section>
  </div>
</section>


<style>
  /* Animación de apertura */
  .fade-in {
    animation: fadeIn 0.5s ease-in-out forwards;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      max-height: 0;
    }
    to {
      opacity: 1;
      max-height: 1000px; /* Ajusta la altura máxima según sea necesario */
    }
  }

  /* Animación de cierre */
  .fade-out {
    animation: fadeOut 0.5s ease-in-out forwards;
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
      max-height: 1000px; /* Ajusta la altura máxima según sea necesario */
    }
    to {
      opacity: 0;
      max-height: 0;
    }
  }
</style>
